<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MOC on Keido</title><link>https://keido.site/tags/MOC/</link><description>Recent content in MOC on Keido</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://keido.site/tags/MOC/index.xml" rel="self" type="application/rss+xml"/><item><title>🏛Clojure考察</title><link>https://keido.site/notes/20220309182946/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220309182946/</guid><description>個人的なポエム of Clojure.
refs: 🏷Clojure 📝Clojureモチベ 📝Clojure思想
🖊シンプルさが前に進む力となる Clojure | Futurismo 💡考察: ClojureはJavaよりもシンプルに行数が短く書けるのは本当か？ 同じ主張はScalaでもされている.
Java8 で登場した Stream API記法をつかったコードで比較しているのかは気になる.
for文やif文を多用したJava7以前の記法のコードと比較してClojureはコードが少なく書けるんですよ!といってもそこには比較が片手落ちなきがする.
Java8以降のより関数型に近い記法でJavaを書いたらどうなるのか気になる.
🏷Java
💡考察: Clojureのデータと関数は分けるを深ぼる データと操作を1つのデータ構造に納めるのがクラスでありJava流. データと操作は別々に定義するのがClojure流.
操作というものも関数値(Cの関数ポインタ)と捉えれば, 構造体への参照と関数への参照を1つのデータ型にまとめたものがクラス.
しかし整理のために, 具体的にはデータとそれに対する操作は一緒にしておかないと, わたしの脳が忘れるというコーディング上の課題? への解決策としては, 1つのファイルrecordを定義したらその下にそのデータ構造を操作する関数を書く.
仮にnamespaceをアプリのドメインごとに切るとすると, 1つのnamespace，1つのファイルには１つのrecordを定義することになるのかな？そしてそのドメインに対する操作をそのファイルに書く.
この考察の派生として, 悪い書き方は recordに対するprotocolを定義するのだれども, そのprotocolがrecord専用となってしまい, そのnamespaceにbindingsしてしまうことだ.
これをやりそうになったがこれはJavaの呪いであり, OOPからFPへ慣れてないからな気がした.
protocolはドメインのnamespaceではなくて, リスト操作を想定してそのリストの定義するところに定義するべき.
ref: Clojure Architecture Visitor Pattern Iterator Pattern
💡考察: ClojureのImmutable Dataによってprivateという概念はなくなる？ privateやらカプセル化やらはデータがMutableな世界において以下にバグを出さないかというためのGood Practiceとして発展したので, そもそもデータがImmutableな世界ではその概念が不要か？
それでもnamespaceでprivateな関数を宣言するのはコンピュータというよりは開発やそれを開発する人の都合か？
あるチームの関数を許可なく勝手に使うなよみたいな. 昔組込み開発していたときうちのチームの開発した便利ツールを勝手にみんな使ってさらにそのツールがバグってて苦情を言われるみたいなことがあった, 迷惑.</description></item><item><title>🏛DarkHorse</title><link>https://keido.site/notes/20220128180332/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220128180332/</guid><description>🎓隼たれということわざにフィットという解釈を加える 🎓DarkHorseとは芸術家のような生き方 ref: 📝DarkHorse up: 📂虚無との戦い</description></item><item><title>🏛Startup</title><link>https://keido.site/notes/20220217170710/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220217170710/</guid><description> 🎓火縄銃のリバースエンジニアリングは日本の歴史的ハッキング</description></item><item><title>🏛お金</title><link>https://keido.site/notes/20220222191519/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220222191519/</guid><description> 🎓AI所有というキャッシュフロークワドラントの第5象限を切り開く</description></item><item><title>🏛プログラミング</title><link>https://keido.site/notes/20220128184659/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220128184659/</guid><description>ハッカーマインド
🎓Web Private APIのハッキングは人間のツボを探求することだ 🎓作曲家が楽譜を書くのとハッカーがコードを書くことに違いはない 🎓コードに働かせるというキャッシュフロークワドラントの第5象限ハッカーになりたい 🎓タテとヨコからプログラミング言語を学ぶ 🎓プログラミングの初級者から中級者への上達はコードリーディング 🎓駆け出しエンジニアが実務で使えない問題はWeb業界の問題 🎓プログラミングスクールというのが壮大なムーンショット実験 🎓焦りではなくワクワク感を行動のモチベーションにしたい 🎓Wikiの整理はソースコードのリファクタリングをするときの心構えでやる up: 🏛HOME
Journals プログラミングに興味がなくなってしまった | Futurismo プログラミングの喜びを集めてみた | Futurismo</description></item><item><title>🏛マインドフルネス</title><link>https://keido.site/notes/20220314213239/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220314213239/</guid><description>🎓部屋が乱れは心の乱れの鏡である 🎓GTDのキモはマインドフルネス状態を目指してマインドワンダリングを制御すること 🎓GTDで管理するものはタスクではなく気になることである up: 🏛HOME</description></item><item><title>🏛仕事</title><link>https://keido.site/notes/20220114203056/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220114203056/</guid><description> 🎓UberEats配達員は麻薬密売人 🎓憧れの職業としてのエンジニアが気持ち悪い</description></item><item><title>🏛勉強</title><link>https://keido.site/notes/20220128184558/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220128184558/</guid><description>🎓Wikiの整理はソースコードのリファクタリングをするときの心構えでやる 🎓これからおじさんになる私の勉強は抽象度と知恵を意識する 🎓タテとヨコからプログラミング言語を学ぶ 🎓プログラミングの初級者から中級者への上達はコードリーディング 🎓自分の脳, 第2の脳Wiki, 第3の脳Googleの順で知識を検索する up: 🏛HOME</description></item><item><title>🏛生産性</title><link>https://keido.site/notes/20211222185123/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20211222185123/</guid><description>🎓生産性を高めるためにはまず環境と体調を整えることが最優先 🎓生産性と創造性は矛盾する概念であり同時に求めることは難しい 🎓わたしには生産性よりも創造性のほうがより重要な価値観 🎓焦りではなくワクワク感を行動のモチベーションにしたい 🎓集中力のランナーズハイは存在するか 🎓GTDで管理するものはタスクではなく気になることである 🎓GTDのキモはマインドフルネス状態を目指してマインドワンダリングを制御すること 🎓GTDにおいてタスクの優先度は私で決めるのではなくてシステムが決めるもの up: 🏛HOME</description></item><item><title>🏛知恵まとめ (Zettelkasten)</title><link>https://keido.site/notes/zettelkasten/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/zettelkasten/</guid><description>a.k.a. Zettelkasten.
🏛勉強 🏛お金 🏛心理学 🏛美と芸術 🏛生産性 🏛マインドフルネス 🏛プログラミング 🏛Clojure 🏛仕事 🏛スタートアップ 🎓Keido HOME</description></item><item><title>🏛経道とは</title><link>https://keido.site/notes/20220209051021/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220209051021/</guid><description>📂虚無との戦い
🎓経道とは道を経る者 🎓経道とはThreadである 🎓経道とは仏教を統べる者</description></item><item><title>🏛美と芸術</title><link>https://keido.site/notes/20220310220603/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220310220603/</guid><description>🎓フルベンオタクなのでシンプルなものは美しい 🎓作曲家が楽譜を書くのとハッカーがコードを書くことに違いはない up: 🏛HOME</description></item></channel></rss>