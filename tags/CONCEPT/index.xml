<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CONCEPT on Keido</title><link>https://keido.site/tags/CONCEPT/</link><description>Recent content in CONCEPT on Keido</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://keido.site/tags/CONCEPT/index.xml" rel="self" type="application/rss+xml"/><item><title>🎓DarkHorseとは芸術家のような生き方</title><link>https://keido.site/notes/20220128180456/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220128180456/</guid><description>DarkHorseは，標準化時代の定める成功の価値を追い求めない.
お金，地位，名声&amp;hellip;
そうではなく，自らの充足感と達成感を追求する. お金ももちろん大事だが，二の次である.
これは芸術家の生き方に似ているかもしれない.
理想の追求のためには社会の求めるものではなく，自分の表現をしなければならない.
岡本太郎の思想にも近い.
up: 🏛DarkHorse</description></item><item><title>🎓GTDで管理するものはタスクではなく気になることである</title><link>https://keido.site/notes/20220102143826/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220102143826/</guid><description>GTDにおけるタスクという言葉を，もっと心を表す言葉で言い換えて読むことはできないか?
なぜならば，GTDはストレスを処理する方法であり，タスクから生じる気になることを扱う.
気になること. 不安，懸念，心配, 興味, 関心(concern, interested, care, wonder).
マインドワンダリングという言葉があるので，ワンダー(woner)という表現がよい.
🏛生産性</description></item><item><title>🎓GTDにおいてタスクの優先度は私で決めるのではなくてシステムが決めるもの</title><link>https://keido.site/notes/20220101130657/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220101130657/</guid><description>GTDにおいてタスクの優先度は私で決めるのではなくてシステムが決めるもの.
事前に与えたパラメーターと今の状況から自動でGTDシステムが判断してこれをやれ！と言うのが理想. そのためにコンテキストをレビューで設定しておく. 私が決めるのはソートのアルゴリズムで優先度ではなかった.
極論、SQL クエリを投げて先頭のいくつかを取り出してあとはルーレットで決めればいい. そしてOK Googleのような音声アシスタントでそれを実現できれば理想. もしくはシンプルなスマホアプリ.
よく陥る課題は，とりあえず頭に思い浮かんだことをInbox経由でSomedayに入れたり後で読もうとReferenceに集積していく結果，リストが膨大になりその整理が辛くなり, なぜかストレスフルによってレビューを諦めてしまうところ.
事前に期限やエネルギー，難易度などのサンクコストをレビューによって明らかにしたらあとは自動で優先度をつけて提示して欲しい. 次はなに? ときけば勝手に次の一手を教えてくれる秘書が理想.もしくは数個の候補からランダムに選択してもいい. GTDシステムというくらいだから，それがアルゴリズムに従って処理するシステムの役目では? もう人間はなにも考えたくないんだ.
難しい判断はすべてバックエンドのシステムに任せてフロントエンドではみたくないし, それこそがストレスフリーな仕事術はずだった.
🏛生産性</description></item><item><title>🎓GTDのキモはマインドフルネス状態を目指してマインドワンダリングを制御すること</title><link>https://keido.site/notes/20220102144508/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220102144508/</guid><description>ストレスフリーとはすなわちマインドフルな状態であり，気になることというのはマインドワンダリングである. そうすると，GTDのキモとはマインドフルネスである.
GTDの文脈でマインドフルネスを直接言及することはデビッド・アレンさんはしていないが，とても共通点が多い. 文脈ではストレス管理という言葉はよく現れる. GTDはもともとMind Like Waterに強く影響を受けている. これはマインドフルネス状態にとても近い.もう一つ言えば，マインドフルネスというのもサマタ瞑想の状態とヴィパッサナー瞑想の状態があるが，この状態はヴィパッサナーに近い.
すべてを把握していることで思考にとらわれることがなく，その場で対処せずにInboxに入れて週次レビューを計画することで受け流すことにより，心の平穏を保つ.
ただ，マインドフルネスと少し違うところは，マインドフルネスは受け入れて手放すことが重要視されているが，GTD はすべての気になることをかき集めてそれを判断保留するか明らかにするという点である. 手放すという観点がGTDにはなく，保留にしてはいるものの，明らかにしてすべてを把握するという意気込みがある.</description></item><item><title>🎓UberEats配達員は麻薬密売人</title><link>https://keido.site/notes/20220128183215/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220128183215/</guid><description>UberEats配達員と麻薬密売人の違いがわからない.
UberEatsの商品は美味しそうであり，美味しそうであるからこそ不健康で，はっきり言ってまえば毒なんだ. 砂糖，塩，そしてトランス脂肪酸，つまり揚げ物.美味しいからみんな買うわけで，不健康なものでなければ儲からないという矛盾.
これは依存症ビジネスである. 恐ろしいことだ，ボタンひとつで甘い物や揚げ物が届くなんて. 自分が制御できる人ならいい，依存状態に陥ってしまった人にとっては驚異でしかない. ポルノと何が違うんだ？超常刺激はキケンである.
生活のためとはいえ, 悪の依存症ビジネスに加担するつもりなのか? 六本木で覚醒剤を売るアフリカ人とマックのポテトを運ぶわたしに違いはあるのか？フードデリバリーは本来社会悪でこの世から消滅するべきなんだ.
UberEats配達の収入がメイン収入なのにやればやるほど自己肯定感が下がるのは，こういう認知がひねくれているからだと思う.
ref: 💡ウーバーイーツをゲーミフィケーションの報酬として自動注文できるシステム</description></item><item><title>🎓Web Private APIのハッキングは人間のツボを探求することだ</title><link>https://keido.site/notes/20220128184817/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220128184817/</guid><description>Webサービスには隠された非公開APIがあり，それらは公開されてないからこそハッカーの技法によって解析するしかない.
しかしそのような秘密のトビラの解析は，人間の体に偏在するツボを探り当てる行為に似ている.
直感的にはみえないんだ，しかしハッキングすることによってとんでもないボタンが見つかる. ハッキングはハリーポッターでいうところの闇の魔術かもしれない.
entered from: 📝Twitter Private API</description></item><item><title>🎓Wikiの整理はソースコードのリファクタリングをするときの心構えでやる</title><link>https://keido.site/notes/20220112100409/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220112100409/</guid><description>良い着眼点，深堀する.
結局zettelkastenやwikiを含むメモというものはトピックやコンセプト単位ごとにファイルで管理するので，大量のソースコードのマネジメントを操るためのフォルダ構造ったり，情報のまとめ方だったりの，パターンがアルはずであり，それはドキュメントを管理するにしてもコードを管理するにしても，共通点もあるはず.
ref: 🎓知恵をノートで管理してアウトラインとしてコンパイル</description></item><item><title>🎓コードに働かせるというキャッシュフロークワドラントの第5象限ハッカーになりたい</title><link>https://keido.site/notes/20220222191656/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220222191656/</guid><description>ロバートキヨサキのキャッシュフロクワドラントには投資家, ビジネスオーナー, 自営業, 従業員という4象限がある.
しかし私は存在しない第5象限, ハッカーという普通の奴らの上を行く象限を目指す.
ビジネスオーナーは人に働かせる, 投資家はお金に働かせる. そしてハッカーはコードに働かせる.
いや，正直に言うと投資家にもビジネスオーナーにもなりたい. しかし私はお金もないし人と関わるのも苦手だ. そしてコードを書くのは得意だ. なのでプログラムを働かせてお金を稼ぎたい.
ソフトウェアならばいくらでもコピー可能である. 奴隷のように24時間酷使してもよい. そして自分でメンテナンスできる. ハードウェアを交えてロボット開発もよい.
私はFIREした結果よりもFIREを目指して数学を駆使して開発することにワクワクする. 広義の意味でのAIを所有, ロボットを所有することは資産になる. もう少し具体的には, 今の技術でならBotを所有することかもしれない.
未来はそのようなAIを所有することが冨になり力になる時代がくるかもしれない. いや，こないかもしれない.
しかしその不確かなこと, 未踏の世界, 人真似でないことにワクワクするならばその道を進みたい. それはプログラミングができる人にしか進めないHacker Wayなのだから.
Dr.スランプアラレちゃんを開発したい, んちゃ！
ref: 🏛お金 🏛プログラミング</description></item><item><title>🎓これからおじさんになる私の勉強は抽象度と知恵を意識する</title><link>https://keido.site/notes/20220214080612/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220214080612/</guid><description>概念の基礎的な部分やキモを理解する. そのためには抽象度による整理が必要. 同じ抽象度をグループ化するか具体と抽象で階層にする, やることはSimpleに２つだ, 難しいことはない.
概念そのものの理解は単なる知識にすぎない. 新しい情報とわたしがすでに知っている知識を結びつける. 具体的には比較と構造を加えることによって自分の味付けをすると知識は知恵になる.
これからの勉強は抽象度の整理, 知識から知恵を意識する. そしてその知恵は3分で説明できるかたちで長期記憶に記憶する.
最近，ここ10年の間に学んだことを結構忘れていることに気づいた. これはこれからもドンドン忘れていくだろう. 今までは新しい情報を得ることが成長につながると思い，深堀をせずにただインプットしていた. もう歳だし，今までの方法でうまく言っていないと思うからこそ，このタイミングで新しい方法を試すことで成長したい.
大丈夫，IT業界の人はけっこう最新のトレンドを追うことに熱心で, 私と同じトラップにハマっている人はたくさんいるようにみえる. そして若い人は学習意欲はおじさんよりも高いので, どうしたって最新技術を同じ方法で学んでも勝てる保証はない.
だからこそ，1つずつの知識を磨き込むような他人と違う方法を強化していくことは強みになるはず. おじさんは過去の知識と今の知識を結びつけることを武器にする.
今はいまいちだけど, コレをこれから強みに育てていく.
ref: 🎓覚悟をもってゆっくり勉強する up: 🏛勉強</description></item><item><title>🎓タテとヨコからプログラミング言語を学ぶ</title><link>https://keido.site/notes/20220307104708/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220307104708/</guid><description>私は大学受験のセンター試験で世界史を選択したが, そのとき大いに影響を受け, かつワクワク書籍が以下の２つ.
タテから見る世界史 ヨコから見る世界史 この意味するところは, タテから各国の歴史を通史で捉え, ヨコから各国間の影響や同時代の文化が同歴史を変えていったのかを捉えることによって, 知識を縦横無尽に組み合わせて知的興奮を促す.
プログラミング言語を学ぶときも, この考えでいきたい.
すなわち, タテが各言語でありヨコがプログラムにおけるコンセプトやパラダイムである.
C言語とJavaとRubyとClojure, それぞれの言語ごとの書籍はある. しかしそれぞれの言語に共通するコンセプトを能動的につなげることが大事. その努力がより一層知識を深堀して理解を促し, 記憶に定着する.
パターンやフレームワークにも転用できるかもしれない.
そして, このWikiではそのようなヨコの繋がりをタグ🏷 をつかって重要視する.
🏛プログラミング 🏛勉強</description></item><item><title>🎓フルベンオタクなのでシンプルなものは美しい</title><link>https://keido.site/notes/20220310220807/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220310220807/</guid><description>たいへんこの言葉に惹かれる. 最近ではClojureに惹かれる.
Simple made Easy
しかし原体験としては, 浪人生のときにフルトヴェングラーの奏でる音楽に魅了されたことが間違いなく大きい.
偉大なものはシンプルである (フルトヴェングラー 音と言葉)
まさにこれ
up: 🏛美と芸術</description></item><item><title>🎓プログラミングスクールというのが壮大なムーンショット実験</title><link>https://keido.site/notes/20220314085623/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220314085623/</guid><description>プログラミングスクールというのはアメリカから輸入したものだ.
アメリカでは理系の院を卒業した人がソフトウェアエンジニアになる. アメリカの大学はそもそも高額だし, 勉強も難しい.
しかしそのキャリアパスを崩すイノベーションがプログラミングブートキャンプ.
なんと理系大学でコンピュータ・サイエンスを学ばずとも, 一気集中で学んでエンジニアになるというキャリアパスが開けた. プログラミングスクールは非常に高額だがCS大学院卒業に比べれば圧倒的に安い. こんな私だって理系大学で情報数学をみっちり学んだ.
そしてそれを中途半端に輸入して中途半端な教育をするのが日本.
もともと日本には文系でもなぜかエンジニアになれちゃうという不思議な国. それは会社にはいったら教育機関がありしっかり教えてくれるから. 私の入った新卒の会社だと3年でようやく１つの機能実装を任されるような教育体制だった. 最近のトレンドが3ヶ月でプログラミングを身に着けて実務というのがそもそも月面着陸なみのムーンショットなのだ.
3ヶ月で一人前にするなんて教育部のおばさんたち(お姉さま方)はびっくりするかもしれない. しかしそれを実際にやってしまうのがプログラミングスクールであり, しかも10人に1人くらいはその教育で普通のぼんくら社員が3年でのんびり育つところを一気に駆け抜けることも事実.
プログラミングスクールの批判して値段が高いし実務で使えないというのは, そもそも大学や専門学校に比べれば圧倒的に安いのでそれでエンジニアになれれば儲けものだし, 普通は3年で1人前になるところを3ヶ月で目指すところ自体が難しいということを理解すると温かい目で見ることができる.
🏛プログラミング</description></item><item><title>🎓プログラミングの初級者から中級者への上達はコードリーディング</title><link>https://keido.site/notes/20220314083804/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220314083804/</guid><description>プログラミングの勉強は初級レベルならば書籍を読んでチュートリアルを読めばよい. 問題はそこから. 実際に仕事でコードを書こうとすると, 本で学んだ知識で対応出来ないことが多い.
この課題感はプログラミングスクール後から仕事で使えるレベルのギャップという点で色んな人が課題に感じているはず. 駆け出しエンジニアが実務で使えない問題.
この溝を埋めるには, 他人の書いたコードを読んで学ぶしかない. 特に情報が少なくて検索でも見つからない場合は, ひたすらGitHubを漁って他人のコードを読み, これはなにをしているのかを精読するのがよい.
この考え方は今にはじまったことではない. 昔UNIXの時代はそもそも検索できなかった. C言語で書かれたOSコードリーディングで力を身に着けた.
Code Reading ~オープンソースから学ぶソフトウェア開発技法 | Diomidis Spinellis, まつもと ゆきひろAmazon
🏛プログラミング</description></item><item><title>🎓わたしには生産性よりも創造性のほうがより重要な価値観</title><link>https://keido.site/notes/20211228134532/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20211228134532/</guid><description>集中力を高めたりライフハックをして生産性を追求することも，ワクワクして好奇心のままにいろいろ試したりすることもどちらも好きだし大事な価値観.
しかし，生産性と創造性は矛盾する概念であり同時に求めることは難しい.
どちらがわたしにとって重要かというと，創造性だ. なせならば，その元には焦りではなくワクワク感を行動のモチベーションにしたいという欲がある.
目標を定めてそれに向かって不安と焦りで努力して達成の喜びを追い求めるよりも，今この瞬間にワクワクしていろいろ寄り道しながら目標に向かっていくことのほうが好きだ.
up: 🏛生産性</description></item><item><title>🎓作曲家が楽譜を書くのとハッカーがコードを書くことに違いはない</title><link>https://keido.site/notes/20220128185436/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220128185436/</guid><description>entered from: 💻What I Worked On - Paul Graham(2022)
ポール・グレアムの最近の活動に感動.
ハッカーと画家の思想を，エッセイを書いてから数十年たっても実践している. ポール・グレアムがプログラミング言語を創る行為と，マーラーが交響曲を作曲すること，これらに違いはない.
もっと言ってしまえば，ハッカーの創造行為は芸術家のそれである.
わたしは学生のときはベートーヴェンに憧れて交響曲作曲家になりたかった. それに比べれば芸術活動としてのプログラミングに憧れ, たとえそれで食えなくても交響曲作曲家よりは圧倒的にましだろう.
refs: 🏛プログラミング 🏷Paul Graham 📚Hackers and Painters 💡ベートーヴェンは音楽家を職人から芸術家にした</description></item><item><title>🎓憧れの職業としてのエンジニアが気持ち悪い</title><link>https://keido.site/notes/20220226185535/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220226185535/</guid><description>元ネタは Paul Graham のHacker and Painterから.
どうも昔からクラシック音楽が好きで作曲家の生き方に憧れを描いているからなのか, 楽器も弾けないくせに芸術家に憧れを抱いていた. しかし私が表現者として熱中したのは落語であり, 芸人としての生き方にも憧れを抱いた. そういう青春時代への憧れがあったものの, 結局的にコードを書くことを生業にすることになった.
しかしある時, 気づいた.
画家は筆と絵の具で自分の表現したいものを表現する. 小説家は文章で自分の表現したいものを表現する. 作曲家は音楽で自分の表現したいものを表現する. 彼らは芸術家という.
王侯貴族のためのミサ曲が時には必要かもしれない. 資本家のために絵画を書く必要もあるかもしれない. しかしそれは処世を生きるための対処にすぎない. 音楽家や小説家は他人に雇われることをはじめから目指すのか？いや, 憧れの画家や作曲家に自分もなりたいと思ってその道を目指すのだろう. その結果現実の厳しさに心が折れてしまっても, はじめはそうであってほしい.
プログラミングを学んだ人はどうだろう？もはやプログラミングを学んだらエンジニアになることが当たり前の風潮がある.エンジニアになれれば成功だと. これはコードを書く芸術家という視点から見るなんとも偏りきったものの見方ではないか？
どちらかというとエンジニアになることは悲しむべきことだ. プログラミングを通じて芸術家を目指すならば, ビジネスオーナーやプロダクトマネージャーの欲しい物を作っている限り芸術家にはなれない.
最近, このエンジニアバンザイという風潮にとても違和感を感じるのだ. Youtubeのエンジニアに関する動画のサムネイルをみると, 気持ち悪さを感じる. エンジニアになるというということは悔しいことであり無念であること, これはわたしだけの感覚なのだろうか？同意する人はいるのだろうか？
コードは表現の道具に過ぎず, それを使って何を表現するかだ.
ということを考えながら, プッチーニのラ・ボエームをきいているよ.
Puccini: La Bohème (Carlos Kleiber, Tokyo, 1981) - YouTube
ref: 🎓作曲家が楽譜を書くのとハッカーがコードを書くことに違いはない</description></item><item><title>🎓焦りではなくワクワク感を行動のモチベーションにしたい</title><link>https://keido.site/notes/20211223164613/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20211223164613/</guid><description>焦りではなくワクワク感を行動のモチベーションにしたい
これは脳内ホルモンでいうとノルアドレナリンではなくドーパミンをモチベーションにするということであり，一種のゲーミフィケーションでもある.
ハッカーになりたいならば, 恐怖ではなく好奇心で行動を選択する. 恐怖心と好奇心のどちらを優先するかは優劣はない.
この価値観に従う！という強い決意でワクワク感を基盤にする.
🏛生産性</description></item><item><title>🎓生産性と創造性は矛盾する概念であり同時に求めることは難しい</title><link>https://keido.site/notes/20211228133959/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20211228133959/</guid><description>集中力を高めて生産性を追い求めることと，好奇心を元に創造性を発揮することは真逆のことである.
生産性は時間を短縮する行為であり，目標を達成することが大事な価値観であり，方向性は未来にある.
一方，創造性は好奇心のままにワクワクして楽しむことであり，今この瞬間の充実が大事な価値観であり，方向性は現在にある.
生産性を追求すると時間を短縮できるが，好奇心のままにいろいろと寄り道をすると楽しいものの結果的に時間がかかる.
up: 🏛生産性</description></item><item><title>🎓生産性を高めるためにはまず環境と体調を整えることが最優先</title><link>https://keido.site/notes/20211225205649/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20211225205649/</guid><description>集中力を発揮するためには，まず心を整える必要がある.
心を整えるためには，身体の調子を整える必要がある.
身体の調子を整えるには，睡眠，食事，運動の３つが不可欠である.
さらに，部屋が乱れは心の乱れの鏡であるので，部屋の整理整頓が不可欠である.
up: 🏛生産性</description></item><item><title>🎓知恵をノートで管理してコンパイルすることによりアウトラインを生成する</title><link>https://keido.site/notes/20220112102424/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220112102424/</guid><description>アウトプットはコンパイルという着眼点.
captured from: 『アイデアを形にする』アイデア - YouTube ref: コンパイラ周りの技術を元に知的生産技術のためのツールを開発</description></item><item><title>🎓経道とはThreadである</title><link>https://keido.site/notes/20220209051354/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220209051354/</guid><description>Clojure Threading Macros より.
Threadというのは, 糸だったり筋道という意味がある.
これはわたしではないか？
up: 🏛経道とは</description></item><item><title>🎓経道とは仏教を統べる者</title><link>https://keido.site/notes/20220209195705/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220209195705/</guid><description>Googleで自分の名前を検索すると，仏道という意味がでてくる.
経道滅尽とは何？ Weblio辞書
つまりいろんな仏教の上位互換ということか？メタクラス？
父親に名前のことを質問したら，お前はゴーダマシッダールタを超える男だと言っていた.
しかし実際はあみだくじで決定したことを知っている.
up: 🏛経道とは</description></item><item><title>🎓自分の脳と第2の脳のWikiと第3の脳のGoogleの順で知識を検索する</title><link>https://keido.site/notes/20220320064524/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220320064524/</guid><description>知識を検索するとき順番.
まずは目をつぶって自分の知っている範囲で推論のみで知識を引っ張り出す. それで検索できなければこのKeido(Wiki &amp;amp; Zettelkasten)を検索する. それでも見つからなければ Googleで検索する.
このような第2の脳=Second BrainというのはEvernoteで有名になった気がする.
これに取り組む意義というのは, 結局のところ知識, つまりシナプスの結合の強さは想起することによってのみ強化される.
もちろん速く答えにたどり着くという点においてはすぐにGoogleで調べればいい. しかし, 脳を鍛えるという観点において, この習慣を身につけることはボケ防止で悪くない.
🏛知的生産技術</description></item><item><title>🎓覚悟をもってゆっくり勉強する</title><link>https://keido.site/notes/20220306180547/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220306180547/</guid><description>🎓これからおじさんになる私の勉強は抽象度と知恵を意識する
これをいざ実践しようとすると, けっこう進捗がでない.
そんなときは, 過去に自分が忘れてきた知識を思い出そう.
学生のとき一夜漬けで覚えた知識の中で今覚えていることはなんだろうか？もちろん, それで100点の成績を取って先生に褒められたとしても, それから数年経って忘れてしまったら, 自分は自分を褒められるだろうか？
大学受験のとき, 物理も化学も生物も地学も学んだ. 古文も漢文も, 世界史も地理も日本史も学んだ. それらは今覚えているだろうか？
たくさんの忘れてしまう知識よりも, 知識と知識を網の目につなぎ合わせた守りの学習のほうが, 残るものが大きい.
焦ることはない, 慎重に.
created: &amp;lt;2022-03-06 日 18:06&amp;gt;</description></item><item><title>🎓部屋が乱れは心の乱れの鏡である</title><link>https://keido.site/notes/20211225205954/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20211225205954/</guid><description>心が乱れると部屋の片付けがおろそかになる.
したがって，部屋か散らかっているということは心が安定していない.
逆に言えば，心を整えたかったら部屋の整理整頓をするのがよい.
🏛マインドフルネス</description></item><item><title>🎓隼たれということわざにフィットという解釈を加える</title><link>https://keido.site/notes/20220128163732/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220128163732/</guid><description>隼たれ.
中学の時の理科の先生が言っていて今でも覚えている言葉. 隼は止まると死んでしまう，だから常に努力しなければいけない, というもの.
しかし20年が経ち新解釈を考えついた. 個性学におけるフィットという概念.
ハヤブサにフィットする生息地は多様に存在する. そしてハヤブサは最も快適に生きられる場所, 獲物を独占できる場所を縄張りとする.高層ビルの立ち並ぶニューヨークのマンハッタン島だって，その都市環境がフィットすれば住み着くのだ.
すなわち，ハヤブサは常に努力して自分にあった場所を探して飛び回っているのだ. 自分の能力が活かせる場所を探し，選択する能力を持つのだ.
up: 🏛DarkHorse</description></item><item><title>🎓集中力のランナーズハイは存在するか</title><link>https://keido.site/notes/20220204072630/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220204072630/</guid><description>集中力は科学的にはこまめに休憩を取ったほうがよいとされているが, 最近どうも疲労感を超えたところに第２の没頭ゾーンがある気がしてた.
そして科学的研究は作業を開始してから疲労するまでを扱っているように思う.
マラソンでランナーズハイのようなもので，疲労のピークを一旦超えてしまうとあとは脳が熱を帯び，ワクワクの好奇心をもとに没頭できることがある.
そして科学的事実は平均的な結論であり，私個人の事実と当てはまるとは限らない.</description></item><item><title>🎓駆け出しエンジニアが実務で使えないのはWeb業界の問題</title><link>https://keido.site/notes/20220314084820/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220314084820/</guid><description>プログラミングスクールを卒業しても実務で使えないとよくきく.
これはそもそも特殊な状況と考える.
わたしのいたSE業界(組込み業界だが)は数年かけて1人前にするのだ. その代わりになかなかはじめは大きな仕事を任せてくれなく先輩の手伝いをしながら学んでいく. プログラミングスクールというのが壮大なムーンショット実験.
SE会社だとそもそも教育機関がありちゃんと教育する体制がある. SEといっても自前でシステム開発するのと受託開発や業務委託に分けられる. 業務委託の客先常駐なんてへんなやつを派遣したらそもそも客先に怒られるので使えるレベルに教育するか先輩とセットで売られる.
駆け出しエンジニアを欲しがるのはスタートアップだろう. なぜなら教育機関なんてスタートアップには用意する余裕がないんだから.
SE業界とWeb業界に文化の差がある気がする.
🏛プログラミング</description></item></channel></rss>