<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TAG on Keido</title><link>https://keido.site/tags/TAG/</link><description>Recent content in TAG on Keido</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://keido.site/tags/TAG/index.xml" rel="self" type="application/rss+xml"/><item><title>👨Dmitri Sotnikov(@yogthos)</title><link>https://keido.site/notes/20220323104545/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220323104545/</guid><description>ClojureのWeb FrameworkであるLumninusの開発者. 書籍Web Development with Clojureの著者. 🏷Clojurians</description></item><item><title>👨Paul Graham</title><link>https://keido.site/notes/20211215145929/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20211215145929/</guid><description> Wizard Programmer of 📝Common Lisp Founder of 📝Y Combinator tags: 🏷Founder refs: 📚ハッカーと画家 あなたはハッカーですか？ハッカーと画家から学ぶハッカー気質について。 | Futurismo My Visit with THE LORD OF THE STARTUPS: Y Combinator&amp;rsquo;s Paul Graham - YouTube ポールグレアム（Paul Graham）の日本語訳エッセー｜Jack｜note</description></item><item><title>📝Alex Miller</title><link>https://keido.site/notes/20220320181411/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220320181411/</guid><description>Clojureの開発メンバ Clojure Updateお知らせ係 https://clojure.org/news/news puredanger https://twitter.com/puredanger 純粋危険氏と読む. 🏷Clojurians</description></item><item><title>📝Cognitect</title><link>https://keido.site/notes/20220324182338/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220324182338/</guid><description> Datomic開発元. Clojure開発コアメンバ所属. Nubankに買収された. COGNITECT JOINS NUBANK(2020/07/23) List of Cognitect Developers 👨Stuart Halloway(@stuarthalloway)</description></item><item><title>📝Common Lisp</title><link>https://keido.site/notes/20211211065629/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20211211065629/</guid><description> tags: 🏷Programming Language 🏷Lisp wiki: Common Lisp - Wikipedia Common Lisp Books 📚Land of Lisp - Conrad Barski(2013) 📚実践Common Lisp - Peter Seibel(2008) 📚On Lisp - Paul Graham(1993) 2022年のCommon Lispの学習本はこれだ! References 💻A Road to Common Lisp / Steve Losh</description></item><item><title>📝Expression Problem</title><link>https://keido.site/notes/20220307102236/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220307102236/</guid><description>様々なプログラミング言語のプログラミングパラダイムについての長所と短所を議論する際に用いられる用語.
型変換や条件分岐を使用せずに、既存のデータ型に機能を追加するにはどうすれば良いのか、という問題.
Expression problem - Wikipedia (ja) Expression problem - Wikipedia refs:
📝ポリモーフィズム 📝Clojure Expression Problem データ型の追加 条件分岐 switch パターンマッチ 関数の追加 インタフェース up: 📁Programming Paradigms</description></item><item><title>📝git</title><link>https://keido.site/notes/20220308203433/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220308203433/</guid><description>refs: 📂ソフトウェア開発
Git Emoji Prefix git commit messageのprefixに絵文字をつかってテンションを上げようという流行.
gitmoji というOSSなど支援ツールもあるものの, 絵文字の種類が多すぎて覚えられないし不要なものもある.
そのため独自ルールを設定して運用する. 大事なのは決められたルールで統一することなので.
wikiの都合上, unicodeとgithubの両方の絵文字を記載.
🎉init: はじめてのコミット(:tada:) ✨feat: 新しい機能追加(:sparkles:) 🔥fix: バグ修正(:flame:) 💪improve: 機能改善(:muscle:) 🎨refactor: リファクタリング(:art:) 📝docs: ドキュメント修正(:pencil:) ✅test: テスト, 評価(:white_check_mark:) 🔨chore: 雑務(:hammer:) 🐥wip: 取り掛かり中(:hatched-chick:) 動物なら何でもいい 💥refactor: 破壊的変更(:boom:) 逆引きgit: hotto gitの操作であれどうやるのをまとめていく.
howto: gitのローカルのブランチ名を変更したい 古いブランチ名から新しいブランチ名に変更.
$ git branch -m &amp;lt;古いブランチ名&amp;gt; &amp;lt;新しいブランチ名&amp;gt; 今開いているブランチをリネーム.
$ git branch -m &amp;lt;新しいブランチ名&amp;gt;</description></item><item><title>📝Google Cloud Platform</title><link>https://keido.site/notes/20220311153749/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220311153749/</guid><description>Googleの提供するクラウドサービス群の総称, 略してGCP.
Firebase は Google Cloudのなかで特にアプリケーション開発に使うものをパッケージングして名前をつけたもの.
📝Google Cloud Firestore 📝Google Cloud Shell 📝Google Cloud Build up: 📂ソフトウェア開発ドメイン</description></item><item><title>📝Java</title><link>https://keido.site/notes/20220303203801/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220303203801/</guid><description>refs: 🏷Programming Language
Javaとは ジェームズ・ゴスリン - Wikipedia が開発.</description></item><item><title>📝NoSQL</title><link>https://keido.site/notes/20220311163333/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220311163333/</guid><description>No SQL.
cf. 🏷RDB
NoSQLとは 非リレーショナルデータベースの総称.
それぞれの設計思想があるが, だいたい以下の4つに分類できる.
列ファミリー ドキュメント Firestore Key-Value グラフ NoSQLの特徴 スキーマレスDB スキーマが必要ではないデータベース. 暗黙スキーマ.
投入したデータに合わせてデータカラム（フィールド）の形式を自由に変更できる. データを投入する前のスキーマ設計に関わる手間を減らすことが可能.
Application Side Join Application Side Join, またはClient Side Joinともいう.
JoinはNoSQLではほとんどサポートされない. そのため2つの集合のデータはアプリケーションて行う.
ドキュメントデータベース ref: Cloud Firestore の使用経験がないユーザー向けの Firestore の説明 | Google Cloud Blog
NoSQLのDB設計 NoSQLデータモデリング技法
💡Application Side(Client Side) Join vs 冗長化モデリング 複数のコレクションの情報を元にデータを処理したい場合, Firestoreではクライアントから２つのクエリでデータを取得して処理する方法が考えられる.</description></item><item><title>📝オブジェクト指向プログラミング</title><link>https://keido.site/notes/20220117174424/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220117174424/</guid><description>up: 📂プログラミングパラダイム
refs:
📝ポリモーフィズム 💻【超絶IQ列伝】苫米地メソッド EX 「抽象度とは何か？」苫米地英人 オブジェクト指向プログラミング - Wikipedia オブジェクト指向プログラミングとは オブジェクト指向パラダイムにおけるプログラミング.
以下の要素をそなえもつ.
データ抽象(Data Abstruction) Inheritance Polymorphism 現在オブジェクト指向言語と呼ばれているものは,実際には,
Abstruct Data Type (Java Integer 型) オブジェクト (Java Object 型) の 2 つを合わせもっている.
その意味で, オブジェクト指向言語と言うよりは抽象データ言語というほうが正しい.
データ抽象(Data Abstruction) データ抽象, Data Abstruction. Expression Problem における解決策.
3 つの構成要素がある.
Input Output Interface データ抽象は内部と外部からなるプログラムかつ, 両者がインターフェースを通じてやりとりするもの.
&amp;gt; A data abstraction is a part of a program that has an inside, an outside, and an interface in between The inside is hidden from the outside.</description></item><item><title>📝プログラミング意味論</title><link>https://keido.site/notes/20220305093025/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220305093025/</guid><description>up: 📁Programming Paradigms
プログラム意味論 | Semanticsとは プログラム意味論. formal semantics, mathmatical semantics ともいう.
プログラムの正しさや正確さを理論づけるための方法.
形式的検証 - Wikipedia
4 つのアプローチがある.
操作的意味論 公理的意味論 記述的意味論 論理的意味論 Operational semantics: 操作的意味論 Explains a program in terms of its execution on a rigorously defined abstract machine
どのパラダイムにおいても適用できる.
Kernel Language Abstract Machine ref: 操作的意味論 - Wikipedia
プログラムの正しさを数学的に証明することを目指す.
Specification: プログラムの入力と出力を定義したものを Program: プログラミング言語によってかかれたデータ Program が Specification を満たしているかを証明する. そのために,</description></item><item><title>📝並行プログラミング</title><link>https://keido.site/notes/20220116195030/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220116195030/</guid><description>up: 📂プログラミングパラダイム
Concurrency.
同一実体(Identity) 時間が経過して値が変化してもそれを指し示すものは変わらない参照.
Software transactinal memory(STM) いわゆるSTM(表記が長いじゃないか&amp;hellip;).
ref: 🔗ソフトウェアトランザクショナルメモリ - Wikipedia
3つの重要な特性がある.
Atomic 複数のメモリを更新しても外部からはひとつのイベントで観測される. Consistent 更新は一貫している. 更新後のvalidationが失敗すれば全ての更新処理は失敗する. Isolated あるトランザクションから別のトランザクションをみることはできない. References 📝Clojure Concurrency Acitve Recalls ソフトウェアの並行性と並列性の違いはなんですか? ロックとトランザクションの違いはなんですか? 同一実体とはなんですか? 時間が経過して値が変化してもそれを指し示すものは変わらない参照.
Software Transactional Memoryの３つの性質はなんですか？ 単一性(Atomic), 一貫性(Consistent), 独立性(Isolated).</description></item><item><title>📝初音ミク</title><link>https://keido.site/notes/20220309205315/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220309205315/</guid><description>初音ミクハック また初音ミクハックしたいなあ.
🖊iRemoconでミクミクにしてやんよ。 | Futurismo</description></item><item><title>📝命令型プログラミング</title><link>https://keido.site/notes/20220305082606/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220305082606/</guid><description>up: 📁Programming Paradigms
命令型プログラミングとは Imperative Programming, 命令型プログラミング.
計算をプログラム状態を変化させる文の列で記述するパラダイム.
ref: 命令型プログラミング - Wikipedia
Function paradigm に Cell (状態) の概念を加えたもの.
Imperative programming = Function paradigm + Cell Declarative Programing の対になる概念. Imperative vs Declaretive is also Stateful vs Stateless.
命令型パラダイムのプログラミング言語 C 言語 アセンブリ言語 関数型プログラミングと命令型プログラミングの違い cf. 📝Functional Programming
Function Paradigms と Imperative Paradigm の違いは,
Functional 状態変化しない (Immunity) 機能追加時にインタフェースの変更の影響度がおおきい. Inperative 機能追加時にインタフェースの変更の影響度がない.</description></item><item><title>📝命名規約概論</title><link>https://keido.site/notes/20220308155618/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220308155618/</guid><description>プログラミング言語の命名規約概論.
Naming Conventions.
up: 📂Software Development refs: 📝コーディング規約概論
変数の命名規約 🏷PascalCase 複合語の先頭が大文字からはじめる. camelCaseと区別するために, CapitalCase, UpperCamelCaseと表現されることもある. 🏷camelCase 複合語の先頭が小文字からはじめる. PascalCaseと区別するために, lowerCamelCaseと表現されることもある. 🏷snake_case 複合語はすべて小文字 単語間の繋がりはアンダーバー _ Python 🏷kebab-case 複合語はすべて小文字 単語間の繋がりはハイフン - lisp-caseともいう. LISP系言語で採用. 🏷Clojure codic codic - プログラマーのためのネーミング辞書
日本語からよい変数名を生成してくれるWebサービス.
🎓個人的な命名規約に関するインサイト とりあえず書き溜めておく. これをどうするかは後で考える.
💡 Web API設計の命名: snake_case vs camelCase 一般的には snake_case or camelCase.</description></item><item><title>📝手続き型プログラミング</title><link>https://keido.site/notes/20220305083612/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220305083612/</guid><description>up: 📁Programming Paradigms ref: 📝Imperative Programming
手続き型プログラミングとは Procedural Programming, 手続き型プログラミング.
プログラムに構造性とモジュール性を持たせたプログラミングパラダイム.
手続き型プログラミング - Wikipedia
手順やチェックリストはプログラムではないが, 命令型プログラミングのスタイルに似たコンセプトである. それらのステップが命令であり, 実世界が状態を保持している.
サブルーチン サブルーチン - Wikipedia
サブルーチンをプロシージャともいう.</description></item><item><title>📝組込みソフト開発概論</title><link>https://keido.site/notes/20220310100907/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220310100907/</guid><description>わたしは長年組込みソフトエンジニアだった気がした.
https://github.com/tsu-nera/futurismo/blob/main/wiki/src/programming/domains/embedded_system.org</description></item><item><title>📝苫米地英人</title><link>https://keido.site/notes/20211211065505/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20211211065505/</guid><description> tags: 🏷Lisp 📝Common Lisp desc: とまべちひでとと読む. Common Lispの伝説的ハッカーとか. Paul Graham のともだちがとまべち😕 refs: 苫米地英人 - Wikipedia 苫米地さんってLisperだったんだよね。 - YouTube 💻【超絶IQ列伝】苫米地メソッド EX 「抽象度とは何か？」苫米地英人 https://www.youtube.com/watch?v=pjUzD3I6u-Q 【CEO動画】エンジニア募集に向けて | エンジニア採用 【CEO動画】国内GAFAMで働く皆さんへ | エンジニア採用 💻Sun Developer News - 21世紀に相応しい仕事をしよう 🖊天才LISP Hacker苫米地英人さんの都市伝説のなぞ | Futurismo</description></item><item><title>List of Clojure Notes</title><link>https://keido.site/notes/20211111225741/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20211111225741/</guid><description> 📂Clojure 📝Clojure/ClojureScriptの参考リンクまとめ 📝Clojurians 📝Clojureの思想 🏛Clojureの考察 📝Clojureモチベ 📝Datomic 📝Overtone</description></item><item><title>List of Erik Meijer</title><link>https://keido.site/notes/20220304090213/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220304090213/</guid><description>アロハシャツの愉快な変なおじさん, Haskell Hacker.
🔗Erik Meijer (computer scientist) - Wikipedia 🖊coursera で Principles of Reactive Programming を受けた | Futurismo 🖊Haskell で 関数型言語入門! edX の Introduction to Functinal Programming を受けた | Futurismo</description></item><item><title>List of Founders</title><link>https://keido.site/notes/20220406175843/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220406175843/</guid><description> 📝Jack Dorsey 📝Paul Graham 📝Peter Thiel</description></item><item><title>List of JVMs</title><link>https://keido.site/notes/20220214041241/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220214041241/</guid><description> 📝JVM共通技術 🏷Clojure 🏷Java</description></item><item><title>List of Lisp Languages</title><link>https://keido.site/notes/20220114080415/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220114080415/</guid><description>LISPとLispの2つの表現があるが, 表記の統一のためにこのサイトではLispで統一していく.
📝Lisp Base Concepts 📝Lispの思想 📝Common Lisp 📝Clojure</description></item><item><title>List of Robert C.martin aka. ボブおじさん</title><link>https://keido.site/notes/20220228062520/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220228062520/</guid><description>最近は愉快なYoutuberか？
https://twitter.com/unclebobmartin Clean Coders - YouTube https://github.com/unclebob まあそう入っても未だに情報発信に熱心なのは嬉しい限り.
私の中ではKent Beckさんと双璧をなして憧れている.
📝Clean Architecture 🖊散文的ブログラミングの哲学につら抜かれたCleanCodeでカルチャーショック体験 | Futurismo 🖊断片的なプロ意識に感銘！プログラマは[CleanCoder]でプロの感性を学ぼう。 | Futurismo</description></item><item><title>List of クラシック音楽</title><link>https://keido.site/notes/20220319071205/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220319071205/</guid><description> 📝ベートーヴェン 📝モーツァルト 📝許光俊 📝神曲のクラシック音楽への影響</description></item><item><title>List of プログラマ</title><link>https://keido.site/notes/20220228063204/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220228063204/</guid><description> 🏷Robert C.Martin 🏷Rich Hickey 🏷Paul Graham 🏷苫米地英人 🏷Erik Meijer 📝池田敏雄</description></item><item><title>List of プログラミングモチベ</title><link>https://keido.site/notes/20220305123936/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220305123936/</guid><description> 📝Clojureモチベ 🔗プログラマは芸術家となりえるか？クヌース先生のプログラム論を読んだ読書メモ | Futurismo アートとしてのプログラミングについてのクヌース先生のエッセイ</description></item><item><title>List of プログラミング言語</title><link>https://keido.site/notes/20220307152757/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220307152757/</guid><description> 📝Java 📝Clojure 📝Common Lisp</description></item><item><title>List of プログラミング言語設計思想</title><link>https://keido.site/notes/20220310060448/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220310060448/</guid><description>📝Lispの思想 📝Clojureの思想 📂Programming</description></item><item><title>List of 作曲家</title><link>https://keido.site/notes/20220319071239/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220319071239/</guid><description> 📝ベートーヴェン 📝モーツァルト</description></item><item><title>List of 個人開発</title><link>https://keido.site/notes/20220119145227/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220119145227/</guid><description> 📝Tech系のアダルトサイト制作事例まとめ</description></item><item><title>List of 批評家</title><link>https://keido.site/notes/20220319071651/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220319071651/</guid><description> 📝許光俊</description></item><item><title>🏷Clojurians</title><link>https://keido.site/notes/20220216154041/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220216154041/</guid><description>Clojureが好きそうな人 a.k.a. Rich Hickeyと愉快な仲間たち.
Rich Hickey Alex Miller Stuart Halloway Eric Normand Dmitri Sotnikov(@yogthos) James Reeves(@weavejester) Stuart Sierra References Clojure: dosync radio ClojureにフォーカスしたいYoutubeチャンネル - YouTube by https://twitter.com/iku000888</description></item><item><title>🏷Emacs</title><link>https://keido.site/notes/20220112095806/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220112095806/</guid><description>📝Emacs 📝Org-mode 📝Org-roam 📝ox-hugo 📝Clojure Emacs Config ref: ⚡My Emacs Config - Nothung</description></item><item><title>🏷Firebase</title><link>https://keido.site/notes/20220215183442/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220215183442/</guid><description>Firebaseは Google Cloud のなかで特にアプリケーション開発に使うものをパッケージングして名前をつけたもの.
refs: 🏷Domains 🏷Google Cloud
List of Firebase 📝Firebase with Clojure</description></item><item><title>🏷Rich Hickey</title><link>https://keido.site/notes/20220215162654/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220215162654/</guid><description>Creator of Clojure Language.
🏷Clojure</description></item><item><title>🏷Twitter</title><link>https://keido.site/notes/20211217143718/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20211217143718/</guid><description> 📝Jack Dorsey 📝Twitter Histories 📝Twitter ルール 📝Twitter検索オプション 📝Twitterシャドウバン 📝Twitter SEO Insignts 📁Twitter Development</description></item><item><title>🏷Web Development</title><link>https://keido.site/notes/20220220094636/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220220094636/</guid><description>List of Web Development Notes.
📝Web Development Basic 📝Clojure Web Development ref: 📂プロダクト開発</description></item><item><title>🏷アニメ</title><link>https://keido.site/notes/20220227213744/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220227213744/</guid><description>好きなアニメ. 後で整理したい.
忍たま乱太郎 ドラえもん 魔法陣グルグル ダイの大冒険 ドラゴンボール ワンピース 弱虫ペダル 溝の口サンレッド ドラえもん -&amp;gt; 忍たま乱太郎 -&amp;gt; ダイの大冒険 -&amp;gt; 魔法陣グルグル -&amp;gt; ロードオブザリング -&amp;gt; ニーベルングの指環
アニメというより途中からドラクエ一筋かも. どちらかというとアニメは中学生からはみてない. 小5から中１は魔法陣グルグルが読みたかったのでジャンプではなくガンガンを買ってた. 中2からジャンプになったけど高校生になったらもうジャンプも読んでない.</description></item><item><title>🏷ソフトウェア開発手法</title><link>https://keido.site/notes/20220214053235/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220214053235/</guid><description>📝Clojure REPL Driven Development 📝Exploratory Programming 📝文芸的プログラミング(Literate Programming) ref: 📂プロダクト開発</description></item><item><title>🏷ブログ構築</title><link>https://keido.site/notes/20220228210333/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20220228210333/</guid><description>WikiやBlogの作成ノート.
Keido Wiki 🗒Keido Tips 🗒Keido Note Rules Futurismo Blog 🖊Futurismo Wiki 立ち上げ(Dokuwiki) 🖊ScrapboxによるFuturismo Wiki復活 🖊Futurismo Wiki復活🎉(3回目) with Sphinx 🖊Futurismo Wikiを閉鎖して新たにデジタルガーデンを立ち上げます</description></item><item><title>🏷落語</title><link>https://keido.site/notes/20211211072935/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://keido.site/notes/20211211072935/</guid><description> 🏷落語家 👨立川談志 👨立川志らく 📝小咄集</description></item></channel></rss>